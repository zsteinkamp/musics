#!/bin/bash

##
# Script to generate an nginx.conf and docker-compose.yml file in cwd.
##

if [ ! -d .git ]
then
  echo 'This script must be run from the project root directory.'
fi

# load .env if it's there
if [ -f .env ]
then
  # shellcheck disable=SC2046
  export $(xargs < .env)
fi

# all variables
export MUSICS_WEB_PORT=${MUSICS_WEB_PORT:=3141}
export MUSICS_MOUNT_TYPE=${MUSICS_MOUNT_TYPE:=nfs}
export MUSICS_NFS_HOST=${MUSICS_NFS_HOST:=truenas.lan}
export MUSICS_NFS_PATH=${MUSICS_NFS_PATH:=/mnt/data-pool/shared/musics}
export MUSICS_ORIG_DIR=${MUSICS_ORIG_DIR:=/mnt/shared/musics}

# interactive setup if interactive terminal
if [ -n $PS1 ]
then
  echo
  echo '=================================================================='
  echo 'MUSICS setup...'
  echo '=================================================================='
  echo
  read -r -p "Web port? [${MUSICS_WEB_PORT}] " MUSICS_WEB_PORT_INPUT
  MUSICS_WEB_PORT=${MUSICS_WEB_PORT_INPUT:=${MUSICS_WEB_PORT}}

  read -r -p "Mount type (bind | nfs)? [$MUSICS_MOUNT_TYPE] " MUSICS_MOUNT_TYPE_INPUT
  MUSICS_MOUNT_TYPE=${MUSICS_MOUNT_TYPE_INPUT:=${MUSICS_MOUNT_TYPE}}

  if [ "nfs" == "$MUSICS_MOUNT_TYPE" ]
  then
    # nfs mount
    read -r -p "NFS Host? [$MUSICS_NFS_HOST] " MUSICS_NFS_HOST_INPUT
    MUSICS_NFS_HOST=${MUSICS_NFS_HOST_INPUT:=${MUSICS_NFS_HOST}}
    read -r -p "NFS Path? [$MUSICS_NFS_PATH] " MUSICS_NFS_PATH_INPUT
    MUSICS_NFS_PATH=${MUSICS_NFS_PATH_INPUT:=${MUSICS_NFS_PATH}}
  elif [ "bind" == "$MUSICS_MOUNT_TYPE" ]
  then
    # bind mount
    read -r -p "Music Directory? [$MUSICS_ORIG_DIR] " MUSICS_ORIG_DIR_INPUT
    MUSICS_ORIG_DIR=${MUSICS_ORIG_DIR_INPUT:=${MUSICS_ORIG_DIR}}
  else
    # error
    echo 'Unsupported mount type. :('
    exit 1
  fi
fi

cat << EOF > docker-compose.yml
name: musics_prod
services:
  nginx:
    image: nginx:1
    depends_on:
      - web
    ports:
      - "${MUSICS_WEB_PORT}:3141"
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
EOF
if [ "nfs" == "$MUSICS_MOUNT_TYPE" ]
then
  cat << EOF >> docker-compose.yml
      - musics:/musics:ro
EOF
else
  cat << EOF >> docker-compose.yml
      - ${MUSICS_ORIG_DIR}:/musics:ro
EOF
fi
cat << EOF >> docker-compose.yml
  web:
    build:
      target: prod
    environment:
      NODE_ENV: production
    restart: unless-stopped
    volumes:
EOF
if [ "nfs" == "$MUSICS_MOUNT_TYPE" ]
then
  cat << EOF >> docker-compose.yml
      - musics:/musics:ro
EOF
else
  cat << EOF >> docker-compose.yml
      - ${MUSICS_ORIG_DIR}:/musics:ro
EOF
fi
if [ "nfs" == "$MUSICS_MOUNT_TYPE" ]
then
  cat << EOF >> docker-compose.yml
volumes:
  musics:
    driver: local
    driver_opts:
      type: "nfs"
      o: "addr=${MUSICS_NFS_HOST},nfsvers=4,soft,nolock"
      device: ":${MUSICS_NFS_PATH}"
EOF
fi

cat << EOF > nginx.conf
worker_processes  auto;

events {
  worker_connections  1024;
}

http {
  include mime.types;
  default_type application/octet-stream;
  sendfile on;
  keepalive_timeout 65;
  log_format main_ext '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                      '\$status \$body_bytes_sent "\$http_referer" '
                      '"\$http_user_agent" "\$http_x_forwarded_for" '
                      '"\$host" sn="\$server_name" '
                      'rt=\$request_time '
                      'ua="\$upstream_addr" us="\$upstream_status" '
                      'ut="\$upstream_response_time" ul="\$upstream_response_length" '
                      'cs=\$upstream_cache_status';
  access_log /var/log/nginx/access.log main_ext;

  server {
    listen 3141;
    listen [::]:3141;

    location ~ /musics/(.+) {
      root /musics;
      try_files /\$1 =404;
    }
    location / {
      proxy_pass http://web:3000;
      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
      proxy_set_header Host \$host;
      proxy_http_version 1.1;
      proxy_set_header Upgrade \$http_upgrade;
      proxy_set_header Connection "upgrade";
    }
  }
}
EOF

echo
echo '=================================================================='
echo 'Done!'
echo 'Now run "make" to build and start the production server.'
echo '=================================================================='
echo
echo 'Put the following into a file named ".env" to save these defaults:'
env | grep MUSICS
echo
exit 0
